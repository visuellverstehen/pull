#!/bin/bash

# include custom functions
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
source $SCRIPT_DIR/functions

# Start pull script
color green '‚¨áÔ∏è  pull'
hr

# Handle parameter
while [ "$1" != "" ]; do
    parameter=`echo $1 | awk -F= '{print $1}'`
    value=`echo $1 | awk -F= '{print $2}'`
    case $parameter in
        --help)
          color green 'Help'
          el
          color yellow 'Possible parameters:'
          echo '  --software                the software that is used in this project [statamic|typo3]'
          echo '  --vvcode                  six digit vvcode'
          echo '  --remote-server-user      name of remote server user (defaults to "vvuser")'
          echo '  --remote-server-host      remote server host'
          echo '  --remote-server-port      remote server port (defaults to 22)'
          echo '  --remote-server-folder    remote server folder (defaults to "main")'
          echo '  --exclude-path            path to exclude'
          exit 1
          ;;
        --software)
          software=$value
          ;;
        --vvcode)
          vvcode=$value
          ;;
        --remote-server-host)
          remoteServerHost=$value
          ;;
        --remote-server-port)
          remoteServerPort=$value
          ;;
        --remote-server-folder)
          remoteServerFolder=$value
          ;;
        --exclude-path)
          excludePath=$value
          ;;
        *)
          echo 'Error'
          echo '-----'
          echo 'Unknown parameter:'
          echo '  '$parameter
          exit 1
          ;;
    esac
    shift
done

# Gather parameters
headline 'üìã Gather parameters'
if [[ -z ${software} ]];
then
  read -p 'Software [statamic|typo3]: ' software
else
  echo 'Software:                               '$software
fi
if [[ -z ${vvcode} ]];
then
  read -p 'vvcode: ' vvcode
else
  echo 'vvcode:                                 '$vvcode
fi
if [[ -z ${remoteServerHost} ]];
then
  read -p 'Remote server host [default '$vvcode'.visuel.dev]: ' remoteServerHost
else
  echo 'Remote server host:                     '$remoteServerHost
fi
if [[ -z ${remoteServerPort} ]];
then
  read -p 'Remote server port [default 22]: ' remoteServerPort
else
  echo 'Remote server port [default 22]:        '$remoteServerPort
fi
if [[ -z ${remoteServerFolder} ]];
then
  read -p 'Remote server folder [default "main"]: ' remoteServerFolder
else
  echo 'Remote server folder [default "main"]:        '$remoteServerFolder
fi
echo 'Exclude path: '$excludePath
databaseFilename='export-'$(date +%s)'.sql'
echo 'Database filename:                      '$databaseFilename
echo ''

validate_software
catch 'Software is not valid. Please use one of the following:\statamic | typo3'

# Set SSH port default to 22
if [[ -z ${remoteServerPort} ]];
then
    remoteServerPort=22
fi

# Set remote server folder to main if not set yet
if [[ -z ${remoteServerFolder} ]];
then
    remoteServerFolder="main"
fi

# Set remote server to visuel.dev domain if not set yet
if [[ -z ${remoteServerHost} ]];
then
    remoteServerHost="$vvcode.visuel.dev"
fi

validate_remote_host

remoteServerUser=vvuser
serverPath=/home/vvuser/$remoteServerFolder
serverAddressAndPath=$remoteServerUser@$remoteServerHost:$serverPath
color yellow 'Using the following server address and path:'
echo $serverAddressAndPath
echo ''

# Synchronize images
headline 'üñºÔ∏è Synchronize images'
if [ $software = 'typo3' ];
then
    # Check which directory is used for public files
    webDirectory=web
    if [ -d "public" ];
    then
        webDirectory=public
    fi

    # Extract fileadmin from docker container
    ssh -T $remoteServerUser@$remoteServerHost -p $remoteServerPort "
        cd $serverPath/ && mkdir -p tmp
        docker cp main-application-1:/var/www/html/$webDirectory/fileadmin/ tmp/
    "
    catch "Could not extract fileadmin."

    # Download fileadmin
    rsync -chavzP -e "ssh -p $remoteServerPort" --delete --stats `if [ '$excludePath' != '' ]; then echo --exclude="$excludePath"; fi` --exclude="_processed_" --exclude="_temp_" --include="*.jpg" --include="*.JPG" --include="*.jpeg" --include="*.png" --include="*.PNG" --include="*.gif" --include="*.svg" --include="*.youtube" --include='*/' --exclude="*" $serverAddressAndPath/tmp/fileadmin/ $webDirectory/fileadmin/
    catch "Could not download fileadmin."
    color green "Successfully downloaded fileadmin."
fi
if [ $software = 'statamic' ];
then
    # Extract assets from docker container
    ssh -T $remoteServerUser@$remoteServerHost -p $remoteServerPort "
        cd $serverPath/ && mkdir -p tmp
        docker cp main-application-1:/var/www/html/public/assets/ tmp/
    "
    catch "Could not extract assets."
    # Download assets
    rsync -chavzP -e "ssh -p $remoteServerPort" --delete --stats `if [ '$excludePath' != '' ]; then echo --exclude="$excludePath"; fi` --include="*.jpg" --include="*.JPG" --include="*.jpeg" --include="*.png" --include="*.PNG" --include="*.gif" --include="*.svg" --include='*/' --exclude="*" $serverAddressAndPath/tmp/assets/ public/assets/
    catch "Could not download assets."
    color green "Successfully downloaded assets."

    # Extract statamics static files from docker container
    headline 'üìù Synchronize texts'
    ssh -T $remoteServerUser@$remoteServerHost -p $remoteServerPort "
        cd $serverPath/ && mkdir -p tmp
        docker cp main-application-1:/var/www/html/content/ tmp/
    "
    catch "Could not extract texts."

    # Download texts
    rsync -chavzP -e "ssh -p $remoteServerPort" --delete --stats $serverAddressAndPath/tmp/content/ content/
    catch "Could not download texts."
    color green "Successfully downloaded texts."
fi

# Export database
headline '‚¨ÜÔ∏è Export database'
if database_exists; then
    remoteDatabaseName=$vvcode
    remoteDatabaseUser=$vvcode
    remoteDatabasePassword=$vvcode
    remoteDatabaseHost=localhost

    if is_mariadb; then
        dump=mariadb-dump
        dbsoftware=mariadb
    else
        dump=mysqldump
        dbsoftware=mysql
    fi

    ssh -T $remoteServerUser@$remoteServerHost -p $remoteServerPort "
        cd $serverPath/ && mkdir -p tmp
        (docker compose exec database $dump --no-tablespaces --ignore-table=$remoteDatabaseName.be_sessions --ignore-table=$remoteDatabaseName.cache_md5params --ignore-table=$remoteDatabaseName.cache_treelist --ignore-table=$remoteDatabaseName.cache_hash --ignore-table=$remoteDatabaseName.cache_hash_tags --ignore-table=$remoteDatabaseName.cache_imagesizes --ignore-table=$remoteDatabaseName.cache_imagesizes_tags --ignore-table=$remoteDatabaseName.cache_pages --ignore-table=$remoteDatabaseName.cache_pages_tags --ignore-table=$remoteDatabaseName.cache_pagesection --ignore-table=$remoteDatabaseName.cache_pagesection_tags --ignore-table=$remoteDatabaseName.cache_rootline --ignore-table=$remoteDatabaseName.cache_rootline_tags --ignore-table=$remoteDatabaseName.cache_treelist --ignore-table=$remoteDatabaseName.cf_extbase_datamapfactory_datamap --ignore-table=$remoteDatabaseName.cf_extbase_datamapfactory_datamap_tags --ignore-table=$remoteDatabaseName.cf_extbase_object --ignore-table=$remoteDatabaseName.cf_extbase_object_tags --ignore-table=$remoteDatabaseName.cf_extbase_reflection --ignore-table=$remoteDatabaseName.cf_extbase_reflection_tags --ignore-table=$remoteDatabaseName.tx_extensionmanager_domain_model_extension --ignore-table=$remoteDatabaseName.sys_log --user="$remoteDatabaseUser" --password='$remoteDatabasePassword' --host="$remoteDatabaseHost" $remoteDatabaseName) > tmp/$databaseFilename
    "
    catch "Could not create a sql dump."
    scp -P $remoteServerPort $remoteServerUser@$remoteServerHost:$serverPath'/tmp/'$databaseFilename ./
    catch "Could not download database."

    # Import database
    headline '‚¨áÔ∏è Import database'
    databaseUser=$vvcode
    databaseName=$vvcode
    databasePassword=$vvcode
    docker compose cp $databaseFilename database:/tmp/$databaseFilename
    catch "Failed to import database."
    docker compose exec -T database $dbsoftware --user="$databaseUser" --password="$databasePassword" $databaseName < $databaseFilename
    catch "Failed to import database."
else
    color yellow "No database found, skipping database export."
fi

# Clean up database files
headline 'üßπ Clean up temporary files'
rm $databaseFilename
color green 'Local SQL file was removed.'
ssh -T $remoteServerUser@$remoteServerHost -p $remoteServerPort "
    rm -rf $serverPath/tmp/
"
catch "Could not remove remote temporary files."
color green 'Remote temporary files were removed.'
echo ''

# Future help
headline 'üîú Future help'
echo 'Use this command in the future:'
color yellow './vendor/bin/pull --remote-server-host="'$remoteServerHost'" --remote-server-port="'$remoteServerPort'" --vvcode="'$vvcode'" --exclude-path="'$excludePath'" --software="'$software'"'
echo ''
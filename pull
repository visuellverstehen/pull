#!/bin/bash
echo 'pull'
echo '===='
echo ''

if test -f "./.pull"; then
    source ./.pull
fi

# Handle parameter
while [ "$1" != "" ]; do
    parameter=`echo $1 | awk -F= '{print $1}'`
    value=`echo $1 | awk -F= '{print $2}'`
    case $parameter in
        --help)
          echo 'Help'
          echo '----'
          echo 'Possible parameter:'
          echo '  --environment'
          echo '  --software'
          echo '  --hoster'
          echo '  --vvcode'
          echo '  --remote-server-user'
          echo '  --remote-server-host'
          echo '  --remote-server-port'
          echo '  --exclude-path'
          echo '  --remote-database-user'
          echo '  --remote-database-password'
          echo '  --remote-database-host'
          echo '  --remote-database-name'
          exit 1
          ;;
        --environment)
          environment=$value
          ;;
        --software)
          software=$value
          ;;
        --hoster)
          hoster=$value
          ;;
        --vvcode)
          vvcode=$value
          ;;
        --remote-server-user)
          remoteServerUser=$value
          ;;
        --remote-server-host)
          remoteServerHost=$value
          ;;
        --remote-server-port)
          remoteServerPort=$value
          ;;
        --exclude-path)
          excludePath=$value
          ;;
        --remote-database-user)
          remoteDatabaseUser=$value
          ;;
        --remote-database-password)
          remoteDatabasePassword=$value
          ;;
        --remote-database-host)
          remoteDatabaseHost=$value
          ;;
        --remote-database-name)
          remoteDatabaseName=$value
          ;;
        --local-database-user)
          localDatabaseUser=$value
          ;;
        --local-database-password)
          localDatabasePassword=$value
          ;;
        --local-database-host)
          localDatabaseHost=$value
          ;;
        --local-database-name)
          localDatabaseName=$value
          ;;
        *)
          echo 'Error'
          echo '-----'
          echo 'Unknown parameter:'
          echo '  '$parameter
          exit 1
          ;;
    esac
    shift
done

# Gather parameters
echo 'Gather parameters'
echo '-----------------'
if [[ -z ${environment} ]];
then
  read -p 'Environment [docker|local]: ' environment
else
  echo 'Environment [docker|local]: '$environment
fi
if [[ -z ${software} ]];
then
  read -p 'Software [typo3|laravel|statamic|shopware6]: ' software
else
  echo 'Software [typo3|laravel|statamic|shopware6]: '$software
fi
if [[ -z ${hoster} ]];
then
  read -p 'Hoster [mittwald|forge]: ' hoster
else
  echo 'Hoster [mittwald|forge]: '$hoster
fi
if [[ -z ${vvcode} ]];
then
  read -p 'vvcode: ' vvcode
else
  echo 'vvcode: '$vvcode
fi
if [[ -z ${remoteServerUser} ]];
then
  read -p 'Remote server user: ' remoteServerUser
else
  echo 'Remote server user: '$remoteServerUser
fi
if [[ -z ${remoteServerHost} ]];
then
  read -p 'Remote server host: ' remoteServerHost
else
  echo 'Remote server host: '$remoteServerHost
fi
if [[ -z ${remoteServerPort} ]];
then
  read -p 'Remote server port [default 22]: ' remoteServerPort
else
  echo 'Remote server port [default 22]: '$remoteServerPort
fi
if [[ -z ${remoteDatabaseUser} ]];
then
  read -p 'Remote database user: ' remoteDatabaseUser
else
  echo 'Remote database user: '$remoteDatabaseUser
fi
if [[ -z ${remoteDatabasePassword} ]];
then
  read -p 'Remote database password: ' remoteDatabasePassword
else
  echo 'Remote database password: '$remoteDatabasePassword
fi
if [[ -z ${remoteDatabaseHost} ]];
then
  read -p 'Remote database host: ' remoteDatabaseHost
else
  echo 'Remote database host: '$remoteDatabaseHost
fi
if [[ -z ${remoteDatabaseName} ]];
then
  read -p 'Remote database name: ' remoteDatabaseName
else
  echo 'Remote database name: '$remoteDatabaseName
fi
echo 'Exclude path: '$excludePath
if [ $environment = 'docker' ];
then
  dockerDatabaseUser=$vvcode
  echo 'Docker database user: '$dockerDatabaseUser
  dockerDatabasePassword=$vvcode
  echo 'Docker database password: '$dockerDatabasePassword
  dockerDatabaseHost=$vvcode'_database'
  echo 'Docker database host: '$dockerDatabaseHost
  dockerDatabaseName=$vvcode
  echo 'Docker database name: '$dockerDatabaseName
fi
if [ $environment = 'local' ];
then
  if [[ -z ${localDatabaseUser} ]];
  then
    read -p 'Local database user: ' localDatabaseUser
  else
    echo 'Local database user: '$localDatabaseUser
  fi
  if [[ -z ${localDatabasePassword} ]];
  then
    read -p 'Local database password: ' localDatabasePassword
  else
    echo 'Local database password: '$localDatabasePassword
  fi
  if [[ -z ${localDatabaseHost} ]];
  then
    read -p 'Local database host: ' localDatabaseHost
  else
    echo 'Local database host: '$localDatabaseHost
  fi
  if [[ -z ${localDatabaseName} ]];
  then
    read -p 'Local database name: ' localDatabaseName
  else
    echo 'Local database name: '$localDatabaseName
  fi
fi
databaseFilename='export-'$(date +%s)'.sql'
echo 'Database filename:' $databaseFilename
echo ''

# Set SSH port default to 22
if [[ -z ${remoteServerPort} ]];
then
    remoteServerPort=22
fi

if [ $hoster = 'mittwald' ];
then
  if [ $software = 'laravel' ];
  then
    serverAddressAndPath=$remoteServerUser@$remoteServerHost:/home/www/$remoteServerUser/html/laravel
  fi
  if [ $software = 'typo3' ];
  then
    serverAddressAndPath=$remoteServerUser@$remoteServerHost:/home/www/$remoteServerUser/html/typo3
  fi
else
  serverAddressAndPath=$remoteServerUser@$remoteServerHost:/home/forge/$remoteServerHost
fi
echo 'Using the following server address and path:' $serverAddressAndPath
echo ''

# Synchronize images
echo 'Synchronize images'
echo '-----------------'
if [ $software = 'typo3' ];
then
  # Check which directory is used for public files
  webDirectory=web
  if [ -d "public" ];
  then
    webDirectory=public
  fi

  rsync -chavzP -e "ssh -p $remoteServerPort" --delete --stats `if [ '$excludePath' != '' ]; then echo --exclude="$excludePath"; fi` --exclude="_processed_" --exclude="_temp_" --include="*.jpg" --include="*.JPG" --include="*.jpeg" --include="*.png" --include="*.PNG" --include="*.gif" --include="*.svg" --include="*.youtube" --include='*/' --exclude="*" $serverAddressAndPath/$webDirectory/fileadmin/ $webDirectory/fileadmin/
fi
if [ $software = 'laravel' ];
then
  rsync -chavzP -e "ssh -p $remoteServerPort" --delete --stats `if [ '$excludePath' != '' ]; then echo --exclude="$excludePath"; fi` --include="*.jpg" --include="*.JPG" --include="*.jpeg" --include="*.png" --include="*.PNG" --include="*.gif" --include="*.svg" --include='*/' --exclude="*" $serverAddressAndPath/storage/app/ storage/app/
fi
if [ $software = 'statamic' ];
then
  rsync -chavzP -e "ssh -p $remoteServerPort" --delete --stats `if [ '$excludePath' != '' ]; then echo --exclude="$excludePath"; fi` --include="*.jpg" --include="*.JPG" --include="*.jpeg" --include="*.png" --include="*.PNG" --include="*.gif" --include="*.svg" --include='*/' --exclude="*" $serverAddressAndPath/public/assets/ public/assets/
fi
if [ $software = 'shopware6' ];
then
  rsync -chavzP --delete --stats `if [ '$excludePath' != '' ]; then echo --exclude="$excludePath"; fi` --include="*.jpg" --include="*.JPG" --include="*.jpeg" --include="*.png" --include="*.PNG" --include="*.gif" --include="*.svg" --include="*.webp" --include='*/' --exclude="*" $serverAddressAndPath/public/media/ public/media/
fi
echo ''

# Synchronize texts
if [ $software = 'statamic' ];
then
  echo 'Synchronize texts'
  echo '-----------------'
  rsync -chavzP -e "ssh -p $remoteServerPort" --delete --stats $serverAddressAndPath/content/ content/
fi
echo ''

# Skip database synchronization, if remote database user is empty
if [[ -z ${remoteDatabaseUser} ]];
then
  echo 'Skip database synchronization'
  echo '-----------------------------'
else
  # Export database
  echo 'Export database'
  echo '---------------'
  if [ $hoster = 'mittwald' ];
  then
    serverPath='/home/www/'$remoteServerUser
  else
    serverPath='/home/forge/'$remoteServerHost
  fi
  ssh -T $remoteServerUser@$remoteServerHost -p $remoteServerPort "
    cd $serverPath/ && mkdir -p tmp
    mysqldump --ignore-table=$remoteDatabaseName.be_sessions --ignore-table=$remoteDatabaseName.cache_md5params --ignore-table=$remoteDatabaseName.cache_treelist --ignore-table=$remoteDatabaseName.cache_hash --ignore-table=$remoteDatabaseName.cache_hash_tags --ignore-table=$remoteDatabaseName.cache_imagesizes --ignore-table=$remoteDatabaseName.cache_imagesizes_tags --ignore-table=$remoteDatabaseName.cache_pages --ignore-table=$remoteDatabaseName.cache_pages_tags --ignore-table=$remoteDatabaseName.cache_pagesection --ignore-table=$remoteDatabaseName.cache_pagesection_tags --ignore-table=$remoteDatabaseName.cache_rootline --ignore-table=$remoteDatabaseName.cache_rootline_tags --ignore-table=$remoteDatabaseName.cache_treelist --ignore-table=$remoteDatabaseName.cf_extbase_datamapfactory_datamap --ignore-table=$remoteDatabaseName.cf_extbase_datamapfactory_datamap_tags --ignore-table=$remoteDatabaseName.cf_extbase_object --ignore-table=$remoteDatabaseName.cf_extbase_object_tags --ignore-table=$remoteDatabaseName.cf_extbase_reflection --ignore-table=$remoteDatabaseName.cf_extbase_reflection_tags --ignore-table=$remoteDatabaseName.tx_extensionmanager_domain_model_extension --ignore-table=$remoteDatabaseName.sys_log --user="$remoteDatabaseUser" --password='$remoteDatabasePassword' --host="$remoteDatabaseHost" $remoteDatabaseName > tmp/$databaseFilename
  "
  scp -P $remoteServerPort $remoteServerUser@$remoteServerHost:$serverPath'/tmp/'$databaseFilename ./
  echo ''

  # Import database
  echo 'Import database'
  echo '---------------'
  if [ $environment = 'docker' ];
  then
    docker cp $databaseFilename $dockerDatabaseHost:/var/www/html/$databaseFilename
    docker-compose exec -T database mysql --user="$dockerDatabaseUser" --password="$dockerDatabasePassword" $dockerDatabaseName < $databaseFilename
  fi
  if [ $environment = 'local' ];
  then
    mysql --user="$localDatabaseUser" --password="$localDatabasePassword" --host="$localDatabaseHost" $localDatabaseName < $databaseFilename
  fi
  echo ''

  # Clean up database files
  echo 'Clean up database files'
  echo '-----------------------'
  rm $databaseFilename
  echo 'Local SQL file was removed.'
  if [ $hoster = 'mittwald' ];
  then
    ssh -T $remoteServerUser@$remoteServerHost -p $remoteServerPort "
    rm /home/www/$remoteServerUser/tmp/$databaseFilename
    "
  else
    ssh -T $remoteServerUser@$remoteServerHost -p $remoteServerPort "
    rm /home/forge/$remoteServerHost/tmp/$databaseFilename
    "
  fi
  echo 'Remote SQL file was removed.'
  echo ''
fi

# Future help
echo 'Future help'
echo '-----------'
echo 'Use this command in the future:'

if [ $environment = 'docker' ];
then
  echo './vendor/bin/pull --environment="'$environment'" --remote-server-user="'$remoteServerUser'" --remote-server-host="'$remoteServerHost'" --remote-server-port="'$remoteServerPort'" --vvcode="'$vvcode'" --exclude-path="'$excludePath'" --remote-database-user="'$remoteDatabaseUser'" --remote-database-password="'$remoteDatabasePassword'" --remote-database-host="'$remoteDatabaseHost'" --remote-database-name="'$remoteDatabaseName'" --software="'$software'" --hoster="'$hoster'"'
fi
if [ $environment = 'local' ];
then
  echo './vendor/bin/pull --environment="'$environment'" --remote-server-user="'$remoteServerUser'" --remote-server-host="'$remoteServerHost'" --remote-server-port="'$remoteServerPort'" --vvcode="'$vvcode'" --exclude-path="'$excludePath'" --remote-database-user="'$remoteDatabaseUser'" --remote-database-password="'$remoteDatabasePassword'" --remote-database-host="'$remoteDatabaseHost'" --remote-database-name="'$remoteDatabaseName'" --software="'$software'" --hoster="'$hoster'" --local-database-user="'$localDatabaseUser'" --local-database-password="'$localDatabasePassword'" --local-database-host="'$localDatabaseHost'" --local-database-name="'$localDatabaseName'"'
fi
echo ''
# Write cache file
echo 'Saving configuration in cache file'
echo $(pwd)'/.pull'
echo "environment=$environment" > .pull
echo "software=$software" >> .pull
echo "hoster=$hoster" >> .pull
echo "vvcode=$vvcode" >> .pull
echo "remoteServerUser=$remoteServerUser" >> .pull
echo "remoteServerHost=$remoteServerHost" >> .pull
echo "remoteServerPort=$remoteServerPort" >> .pull
echo "excludePath=$excludePath" >> .pull
echo "remoteDatabaseUser=$remoteDatabaseUser" >> .pull
echo "remoteDatabasePassword=$remoteDatabasePassword" >> .pull
echo "remoteDatabaseHost=$remoteDatabaseHost" >> .pull
echo "remoteDatabaseName=$remoteDatabaseName" >> .pull
echo "localDatabaseUser=$localDatabaseUser" >> .pull
echo "localDatabasePassword=$localDatabasePassword" >> .pull
echo "localDatabaseHost=$localDatabaseHost" >> .pull
echo "localDatabaseName=$localDatabaseName" >> .pull
echo ''